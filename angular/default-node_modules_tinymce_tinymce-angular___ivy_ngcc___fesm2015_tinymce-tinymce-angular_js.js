"use strict";
(self["webpackChunkBalacoClient"] = self["webpackChunkBalacoClient"] || []).push([["default-node_modules_tinymce_tinymce-angular___ivy_ngcc___fesm2015_tinymce-tinymce-angular_js"],{

/***/ 51908:
/*!************************************************************************************************!*\
  !*** ./node_modules/@tinymce/tinymce-angular/__ivy_ngcc__/fesm2015/tinymce-tinymce-angular.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EditorComponent": () => (/* binding */ EditorComponent),
/* harmony export */   "EditorModule": () => (/* binding */ EditorModule),
/* harmony export */   "TINYMCE_SCRIPT_SRC": () => (/* binding */ TINYMCE_SCRIPT_SRC),
/* harmony export */   "ɵa": () => (/* binding */ Events)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 5000);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ 69808);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ 93075);



/**
 * Copyright (c) 2017-present, Ephox, Inc.
 *
 * This source code is licensed under the Apache 2 license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



function EditorComponent_ng_template_0_Template(rf, ctx) {}

const getTinymce = () => {
  const w = typeof window !== 'undefined' ? window : undefined;
  return w && w.tinymce ? w.tinymce : null;
};

const ɵ0$2 = getTinymce;

class Events {
  constructor() {
    this.onBeforePaste = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onBlur = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onClick = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onContextMenu = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onCopy = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onCut = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onDblclick = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onDrag = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onDragDrop = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onDragEnd = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onDragGesture = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onDragOver = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onDrop = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onFocus = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onFocusIn = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onFocusOut = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onKeyDown = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onKeyPress = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onKeyUp = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onMouseDown = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onMouseEnter = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onMouseLeave = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onMouseMove = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onMouseOut = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onMouseOver = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onMouseUp = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onPaste = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onSelectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onActivate = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onAddUndo = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onBeforeAddUndo = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onBeforeExecCommand = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onBeforeGetContent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onBeforeRenderUI = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onBeforeSetContent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onClearUndos = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onDeactivate = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onDirty = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onExecCommand = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onGetContent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onHide = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onInit = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onInitNgModel = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onLoadContent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onNodeChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onPostProcess = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onPostRender = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onPreInit = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onPreProcess = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onProgressState = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onRedo = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onRemove = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onReset = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onResizeEditor = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onSaveContent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onSetAttrib = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onObjectResizeStart = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onObjectResized = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onObjectSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onSetContent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onShow = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onSubmit = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onUndo = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onVisualAid = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
  }

}

Events.ɵfac = function Events_Factory(t) {
  return new (t || Events)();
};

Events.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
  type: Events,
  outputs: {
    onBeforePaste: "onBeforePaste",
    onBlur: "onBlur",
    onClick: "onClick",
    onContextMenu: "onContextMenu",
    onCopy: "onCopy",
    onCut: "onCut",
    onDblclick: "onDblclick",
    onDrag: "onDrag",
    onDragDrop: "onDragDrop",
    onDragEnd: "onDragEnd",
    onDragGesture: "onDragGesture",
    onDragOver: "onDragOver",
    onDrop: "onDrop",
    onFocus: "onFocus",
    onFocusIn: "onFocusIn",
    onFocusOut: "onFocusOut",
    onKeyDown: "onKeyDown",
    onKeyPress: "onKeyPress",
    onKeyUp: "onKeyUp",
    onMouseDown: "onMouseDown",
    onMouseEnter: "onMouseEnter",
    onMouseLeave: "onMouseLeave",
    onMouseMove: "onMouseMove",
    onMouseOut: "onMouseOut",
    onMouseOver: "onMouseOver",
    onMouseUp: "onMouseUp",
    onPaste: "onPaste",
    onSelectionChange: "onSelectionChange",
    onActivate: "onActivate",
    onAddUndo: "onAddUndo",
    onBeforeAddUndo: "onBeforeAddUndo",
    onBeforeExecCommand: "onBeforeExecCommand",
    onBeforeGetContent: "onBeforeGetContent",
    onBeforeRenderUI: "onBeforeRenderUI",
    onBeforeSetContent: "onBeforeSetContent",
    onChange: "onChange",
    onClearUndos: "onClearUndos",
    onDeactivate: "onDeactivate",
    onDirty: "onDirty",
    onExecCommand: "onExecCommand",
    onGetContent: "onGetContent",
    onHide: "onHide",
    onInit: "onInit",
    onInitNgModel: "onInitNgModel",
    onLoadContent: "onLoadContent",
    onNodeChange: "onNodeChange",
    onPostProcess: "onPostProcess",
    onPostRender: "onPostRender",
    onPreInit: "onPreInit",
    onPreProcess: "onPreProcess",
    onProgressState: "onProgressState",
    onRedo: "onRedo",
    onRemove: "onRemove",
    onReset: "onReset",
    onResizeEditor: "onResizeEditor",
    onSaveContent: "onSaveContent",
    onSetAttrib: "onSetAttrib",
    onObjectResizeStart: "onObjectResizeStart",
    onObjectResized: "onObjectResized",
    onObjectSelected: "onObjectSelected",
    onSetContent: "onSetContent",
    onShow: "onShow",
    onSubmit: "onSubmit",
    onUndo: "onUndo",
    onVisualAid: "onVisualAid"
  }
});
Events.propDecorators = {
  onBeforePaste: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onBlur: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onClick: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onContextMenu: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onCopy: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onCut: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onDblclick: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onDrag: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onDragDrop: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onDragEnd: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onDragGesture: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onDragOver: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onDrop: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onFocus: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onFocusIn: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onFocusOut: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onKeyDown: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onKeyPress: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onKeyUp: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onMouseDown: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onMouseEnter: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onMouseLeave: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onMouseMove: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onMouseOut: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onMouseOver: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onMouseUp: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onPaste: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onSelectionChange: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onActivate: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onAddUndo: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onBeforeAddUndo: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onBeforeExecCommand: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onBeforeGetContent: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onBeforeRenderUI: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onBeforeSetContent: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onChange: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onClearUndos: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onDeactivate: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onDirty: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onExecCommand: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onGetContent: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onHide: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onInit: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onInitNgModel: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onLoadContent: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onNodeChange: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onPostProcess: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onPostRender: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onPreInit: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onPreProcess: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onProgressState: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onRedo: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onRemove: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onReset: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onResizeEditor: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onSaveContent: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onSetAttrib: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onObjectResizeStart: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onObjectResized: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onObjectSelected: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onSetContent: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onShow: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onSubmit: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onUndo: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }],
  onVisualAid: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Output
  }]
};
const validEvents = ['onActivate', 'onAddUndo', 'onBeforeAddUndo', 'onBeforeExecCommand', 'onBeforeGetContent', 'onBeforeRenderUI', 'onBeforeSetContent', 'onBeforePaste', 'onBlur', 'onChange', 'onClearUndos', 'onClick', 'onContextMenu', 'onCopy', 'onCut', 'onDblclick', 'onDeactivate', 'onDirty', 'onDrag', 'onDragDrop', 'onDragEnd', 'onDragGesture', 'onDragOver', 'onDrop', 'onExecCommand', 'onFocus', 'onFocusIn', 'onFocusOut', 'onGetContent', 'onHide', 'onInit', 'onKeyDown', 'onKeyPress', 'onKeyUp', 'onLoadContent', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseOut', 'onMouseOver', 'onMouseUp', 'onNodeChange', 'onObjectResizeStart', 'onObjectResized', 'onObjectSelected', 'onPaste', 'onPostProcess', 'onPostRender', 'onPreProcess', 'onProgressState', 'onRedo', 'onRemove', 'onReset', 'onResizeEditor', 'onSaveContent', 'onSelectionChange', 'onSetAttrib', 'onSetContent', 'onShow', 'onSubmit', 'onUndo', 'onVisualAid'];
/**
 * Copyright (c) 2017-present, Ephox, Inc.
 *
 * This source code is licensed under the Apache 2 license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

const bindHandlers = (ctx, editor) => {
  const allowedEvents = getValidEvents(ctx);
  allowedEvents.forEach(eventName => {
    const eventEmitter = ctx[eventName];
    editor.on(eventName.substring(2), event => ctx.ngZone.run(() => eventEmitter.emit({
      event,
      editor
    })));
  });
};

const ɵ0$1 = bindHandlers;

const getValidEvents = ctx => {
  const ignoredEvents = parseStringProperty(ctx.ignoreEvents, []);
  const allowedEvents = parseStringProperty(ctx.allowedEvents, validEvents).filter(event => validEvents.includes(event) && !ignoredEvents.includes(event));
  return allowedEvents;
};

const ɵ1$1 = getValidEvents;

const parseStringProperty = (property, defaultValue) => {
  if (typeof property === 'string') {
    return property.split(',').map(value => value.trim());
  }

  if (Array.isArray(property)) {
    return property;
  }

  return defaultValue;
};

const ɵ2 = parseStringProperty;
let unique = 0;

const uuid = prefix => {
  const date = new Date();
  const time = date.getTime();
  const random = Math.floor(Math.random() * 1000000000);
  unique++;
  return prefix + '_' + random + unique + String(time);
};

const ɵ3 = uuid;

const isTextarea = element => typeof element !== 'undefined' && element.tagName.toLowerCase() === 'textarea';

const ɵ4 = isTextarea;

const normalizePluginArray = plugins => {
  if (typeof plugins === 'undefined' || plugins === '') {
    return [];
  }

  return Array.isArray(plugins) ? plugins : plugins.split(' ');
};

const ɵ5 = normalizePluginArray;

const mergePlugins = (initPlugins, inputPlugins) => normalizePluginArray(initPlugins).concat(normalizePluginArray(inputPlugins));

const ɵ6 = mergePlugins; // eslint-disable-next-line @typescript-eslint/no-empty-function

const noop = () => {};

const ɵ7 = noop;

const isNullOrUndefined = value => value === null || value === undefined;

const ɵ8 = isNullOrUndefined;
/**
 * Copyright (c) 2017-present, Ephox, Inc.
 *
 * This source code is licensed under the Apache 2 license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

const createState = () => ({
  listeners: [],
  scriptId: uuid('tiny-script'),
  scriptLoaded: false
});

const ɵ0 = createState;

const CreateScriptLoader = () => {
  let state = createState();

  const injectScriptTag = (scriptId, doc, url, callback) => {
    const scriptTag = doc.createElement('script');
    scriptTag.referrerPolicy = 'origin';
    scriptTag.type = 'application/javascript';
    scriptTag.id = scriptId;
    scriptTag.src = url;

    const handler = () => {
      scriptTag.removeEventListener('load', handler);
      callback();
    };

    scriptTag.addEventListener('load', handler);

    if (doc.head) {
      doc.head.appendChild(scriptTag);
    }
  };

  const load = (doc, url, callback) => {
    if (state.scriptLoaded) {
      callback();
    } else {
      state.listeners.push(callback);

      if (!doc.getElementById(state.scriptId)) {
        injectScriptTag(state.scriptId, doc, url, () => {
          state.listeners.forEach(fn => fn());
          state.scriptLoaded = true;
        });
      }
    }
  }; // Only to be used by tests.


  const reinitialize = () => {
    state = createState();
  };

  return {
    load,
    reinitialize
  };
};

const ɵ1 = CreateScriptLoader;
const ScriptLoader = CreateScriptLoader();
/* eslint-disable @typescript-eslint/no-parameter-properties */

const TINYMCE_SCRIPT_SRC = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('TINYMCE_SCRIPT_SRC');
const EDITOR_COMPONENT_VALUE_ACCESSOR = {
  provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__.NG_VALUE_ACCESSOR,
  useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(() => EditorComponent),
  multi: true
};

class EditorComponent extends Events {
  constructor(elementRef, ngZone, platformId, tinymceScriptSrc) {
    super();
    this.platformId = platformId;
    this.tinymceScriptSrc = tinymceScriptSrc;
    this.cloudChannel = '5';
    this.apiKey = 'no-api-key';
    this.id = '';
    this.modelEvents = 'change input undo redo';
    this.onTouchedCallback = noop;
    this._elementRef = elementRef;
    this.ngZone = ngZone;
    this.initialise = this.initialise.bind(this);
  }

  set disabled(val) {
    this._disabled = val;

    if (this._editor && this._editor.initialized) {
      this._editor.setMode(val ? 'readonly' : 'design');
    }
  }

  get disabled() {
    return this._disabled;
  }

  get editor() {
    return this._editor;
  }

  writeValue(value) {
    if (this._editor && this._editor.initialized) {
      this._editor.setContent(isNullOrUndefined(value) ? '' : value);
    } else {
      this.initialValue = value === null ? undefined : value;
    }
  }

  registerOnChange(fn) {
    this.onChangeCallback = fn;
  }

  registerOnTouched(fn) {
    this.onTouchedCallback = fn;
  }

  setDisabledState(isDisabled) {
    if (this._editor) {
      this._editor.setMode(isDisabled ? 'readonly' : 'design');
    } else if (isDisabled) {
      this.init = Object.assign(Object.assign({}, this.init), {
        readonly: true
      });
    }
  }

  ngAfterViewInit() {
    var _a;

    if ((0,_angular_common__WEBPACK_IMPORTED_MODULE_2__.isPlatformBrowser)(this.platformId)) {
      this.id = this.id || uuid('tiny-angular');
      this.inline = this.inline !== undefined ? this.inline !== false : !!((_a = this.init) === null || _a === void 0 ? void 0 : _a.inline);
      this.createElement();

      if (getTinymce() !== null) {
        this.initialise();
      } else if (this._element && this._element.ownerDocument) {
        ScriptLoader.load(this._element.ownerDocument, this.getScriptSrc(), this.initialise.bind(this));
      }
    }
  }

  ngOnDestroy() {
    if (getTinymce() !== null) {
      getTinymce().remove(this._editor);
    }
  }

  createElement() {
    const tagName = typeof this.tagName === 'string' ? this.tagName : 'div';
    this._element = document.createElement(this.inline ? tagName : 'textarea');

    if (this._element) {
      if (document.getElementById(this.id)) {
        /* eslint no-console: ["error", { allow: ["warn"] }] */
        console.warn(`TinyMCE-Angular: an element with id [${this.id}] already exists. Editors with duplicate Id will not be able to mount`);
      }

      this._element.id = this.id;

      if (isTextarea(this._element)) {
        this._element.style.visibility = 'hidden';
      }

      this._elementRef.nativeElement.appendChild(this._element);
    }
  }

  initialise() {
    const finalInit = Object.assign(Object.assign({}, this.init), {
      target: this._element,
      inline: this.inline,
      readonly: this.disabled,
      plugins: mergePlugins(this.init && this.init.plugins, this.plugins),
      toolbar: this.toolbar || this.init && this.init.toolbar,
      setup: editor => {
        this._editor = editor;
        editor.on('init', _e => {
          this.initEditor(editor);
        });
        bindHandlers(this, editor);

        if (this.init && typeof this.init.setup === 'function') {
          this.init.setup(editor);
        }
      }
    });

    if (isTextarea(this._element)) {
      this._element.style.visibility = '';
    }

    this.ngZone.runOutsideAngular(() => {
      getTinymce().init(finalInit);
    });
  }

  getScriptSrc() {
    return isNullOrUndefined(this.tinymceScriptSrc) ? `https://cdn.tiny.cloud/1/${this.apiKey}/tinymce/${this.cloudChannel}/tinymce.min.js` : this.tinymceScriptSrc;
  }

  initEditor(editor) {
    editor.on('blur', () => this.ngZone.run(() => this.onTouchedCallback()));
    editor.on(this.modelEvents, () => this.ngZone.run(() => this.emitOnChange(editor)));

    if (typeof this.initialValue === 'string') {
      this.ngZone.run(() => {
        editor.setContent(this.initialValue);

        if (editor.getContent() !== this.initialValue) {
          this.emitOnChange(editor);
        }

        if (this.onInitNgModel !== undefined) {
          this.onInitNgModel.emit(editor);
        }
      });
    }
  }

  emitOnChange(editor) {
    if (this.onChangeCallback) {
      this.onChangeCallback(editor.getContent({
        format: this.outputFormat
      }));
    }
  }

}

EditorComponent.ɵfac = function EditorComponent_Factory(t) {
  return new (t || EditorComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](TINYMCE_SCRIPT_SRC, 8));
};

EditorComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: EditorComponent,
  selectors: [["editor"]],
  inputs: {
    cloudChannel: "cloudChannel",
    apiKey: "apiKey",
    id: "id",
    modelEvents: "modelEvents",
    disabled: "disabled",
    initialValue: "initialValue",
    init: "init",
    inline: "inline",
    outputFormat: "outputFormat",
    tagName: "tagName",
    plugins: "plugins",
    toolbar: "toolbar",
    allowedEvents: "allowedEvents",
    ignoreEvents: "ignoreEvents"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([EDITOR_COMPONENT_VALUE_ACCESSOR]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
  decls: 1,
  vars: 0,
  template: function EditorComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, EditorComponent_ng_template_0_Template, 0, 0, "ng-template");
    }
  },
  styles: ["[_nghost-%COMP%] { display: block; }"]
});

EditorComponent.ctorParameters = () => [{
  type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
}, {
  type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
}, {
  type: Object,
  decorators: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
    args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID]
  }]
}, {
  type: String,
  decorators: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
  }, {
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
    args: [TINYMCE_SCRIPT_SRC]
  }]
}];

EditorComponent.propDecorators = {
  cloudChannel: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
  }],
  apiKey: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
  }],
  init: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
  }],
  id: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
  }],
  initialValue: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
  }],
  outputFormat: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
  }],
  inline: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
  }],
  tagName: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
  }],
  plugins: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
  }],
  toolbar: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
  }],
  modelEvents: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
  }],
  allowedEvents: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
  }],
  ignoreEvents: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
  }],
  disabled: [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
  }]
};

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](EditorComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Component,
    args: [{
      selector: 'editor',
      template: '<ng-template></ng-template>',
      providers: [EDITOR_COMPONENT_VALUE_ACCESSOR],
      styles: [":host { display: block; }"]
    }]
  }], function () {
    return [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone
    }, {
      type: Object,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__.PLATFORM_ID]
      }]
    }, {
      type: String,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,
        args: [TINYMCE_SCRIPT_SRC]
      }]
    }];
  }, {
    cloudChannel: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    apiKey: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    id: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    modelEvents: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    initialValue: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    init: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    inline: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    outputFormat: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    tagName: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    plugins: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    toolbar: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    allowedEvents: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }],
    ignoreEvents: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Input
    }]
  });
})();

class EditorModule {}

EditorModule.ɵfac = function EditorModule_Factory(t) {
  return new (t || EditorModule)();
};

EditorModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
  type: EditorModule
});
EditorModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_1__.FormsModule]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](EditorModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_1__.FormsModule],
      declarations: [EditorComponent],
      exports: [EditorComponent]
    }]
  }], null, null);
})();

(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](EditorModule, {
    declarations: function () {
      return [EditorComponent];
    },
    imports: function () {
      return [_angular_common__WEBPACK_IMPORTED_MODULE_2__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_1__.FormsModule];
    },
    exports: function () {
      return [EditorComponent];
    }
  });
})();
/**
 * Generated bundle index. Do not edit.
 */


 //# sourceMappingURL=tinymce-tinymce-angular.js.map

/***/ })

}]);